{"version":3,"sources":["client/controllers/remoteDummyController.ts","client/components/GameChat.tsx","client/components/ShareButton.tsx","client/components/ShareGameModal.tsx","client/components/ConfirmSurrender.tsx","client/components/InformationMenu.tsx","client/game/SocketGame.tsx","client/utils/useForceUpdate.ts","client/game/OnlineGame.tsx","client/game/LocalSelfGame.tsx","client/controllers/randomController.ts","client/game/LocalRandomGame.tsx","client/game/GameManager.tsx","client/utils/useQuery.ts"],"names":["remoteDummy","submitAction","state","highlighted","handleBoardClick","console","log","handleDropClick","GameChat","socket","useState","messages","setMessages","text","setText","useEffect","messageListener","message","prevMsgs","on","off","Container","fluid","Segment","Group","size","style","height","overflow","map","sender","time","inverted","floated","id","color","borderRadius","Divider","hidden","clearing","onSubmit","event","emit","preventDefault","Input","focus","type","value","onChange","target","placeholder","action","icon","ShareButton","copied","setCopied","shared","setShared","inviteLink","document","URL","shareData","title","url","match","replace","navigator","share","Button","onClick","then","catch","err","alert","Icon","name","clipboard","writeText","ShareGameModal","open","setOpen","Modal","dimmer","Header","Content","Loader","inline","indeterminate","Actions","negative","as","Link","to","ConfirmSurrender","surrender","Confirm","onCancel","onConfirm","InformationMenu","team","result","getResult","Label","getColor","basic","SocketGame","gid","p1","p2","forceUpdate","setValue","useForceUpdate","useHiveGame","apply","actionListener","Wrapped","player","turnNumber","GenericGame","controller","OnlineGame","setSocket","shareGameModalOpen","setShareGameModalOpen","newSocket","socketIOClient","close","useInteractiveController","InteractiveRandom","LocalGame","randomController","actions","Math","floor","random","length","LocalRandomGame","GameManager","useParams","query","URLSearchParams","useLocation","search","get","mode"],"mappings":"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","file":"static/js/4.5ee9ebc5.chunk.js","sourcesContent":["export default function remoteDummy (submitAction, state) {\n        return ({\n            highlighted: [],\n            handleBoardClick: () => console.log(\"Remote player's turn\"),\n            handleDropClick: () => console.log(\"Remote player's turn\")\n        });\n}","import { useState, useEffect } from 'react';\nimport {  Container, Segment, Divider, Input} from 'semantic-ui-react'\n\nexport default function GameChat({ socket }) {\n    const [messages, setMessages] = useState([]);\n    const [text, setText] = useState(\"\");\n\n    useEffect(() => {\n        const messageListener = (message) => {\n            setMessages((prevMsgs) => {\n                return [...prevMsgs, message]\n            });\n        }\n        socket.on('chatMessage', messageListener)\n        return () => {\n            socket.off('chatMessage', messageListener)\n        }\n    }, [socket]);\n\n    const handleSubmit = (event) => {\n        if (text) {\n            socket.emit('chatMessage', text)\n            setText(\"\");\n        }\n        event.preventDefault();\n    }\n    return (\n        <div>\n            <Container fluid>\n            <Segment.Group size='small' style={{\n                height: '30vw',\n                overflow: 'auto'\n            }}>\n                { messages.map( ({text, sender, time}) => {\n                    return (\n                        <>\n                        <Segment inverted key={time} \n                            floated={sender === socket.id ? 'left' : 'right'}\n                            color={sender === socket.id ? 'yellow' : 'green'}\n                            style={{\n                                borderRadius: sender === socket.id ? '25px 25px 25px 0px' : '25px 25px 0px 25px'\n                            }}\n                            >\n                            {text}\n                        </Segment>\n                        <Divider hidden clearing/>\n                        </>\n                    )\n                })}\n            </Segment.Group>\n\n            <form onSubmit={handleSubmit}>\n                <Input fluid focus type=\"text\" value={text}\n                    onChange={(event)=>setText(event.target.value)}\n                    placeholder='Type something'\n                    action={{\n                        icon: 'send',\n                        color: 'blue'\n                     }} />\n            </form>\n            </Container>\n        </div>\n    )\n}\n","import { Button, Icon } from 'semantic-ui-react'\nimport { useState } from 'react'\n\nexport default function ShareButton() {\n    const [copied, setCopied] = useState(false);\n    const [shared, setShared] = useState(false);\n    let inviteLink = document.URL;\n    if (inviteLink.match(\"team=white\")) {\n        inviteLink = inviteLink.replace(\"team=white\", \"team=black\")\n    } else {\n        inviteLink = inviteLink.replace(\"team=black\", \"team=white\")\n    }\n\n    const copyToClipboard = () => {\n        navigator.clipboard.writeText(inviteLink)\n                 .then(() => setCopied(true))\n                 .catch(err => alert(\"Error in copying text: \" + err));\n    };\n\n    // https://dev.to/grafton-studio/native-tap-to-share-in-javascript-with-the-web-share-api-current-status-tips-and-limitations-4g4h\n    const shareData = {\n          title: \"HiveMind\",\n          text: \"You are challenged for a game of Hive!\",\n          url: inviteLink\n        };\n    const nativeShare = () => {\n        navigator.share(shareData)\n                 .then(() => setShared(true))\n        .catch(err => alert(\"Error sharing: \" + err));\n    };\n\n    if (navigator.share) {\n       return (\n            <Button size='tiny' color={shared ? 'grey' : 'black'} onClick={nativeShare}>\n                    <Icon name='share alternate' />\n                    {shared ? 'Shared' : 'Share the link'}\n                </Button>\n       )\n    } else {\n        return (\n        <Button size='tiny' color={copied ? 'grey' : 'black'} onClick={copyToClipboard}>\n                    <Icon name='copy' />\n                    {copied ? 'Copied to clipboard' : 'Click to copy link'}\n        </Button>\n        )\n    }\n}\n","import { Modal, Segment, Loader, Button, Icon } from 'semantic-ui-react'\nimport { Link } from 'react-router-dom'\nimport ShareButton from './ShareButton'\n\n\nexport default function ShareGameModal({ open, setOpen }) {\n    return (\n        <Modal\n            dimmer='blurring'\n            open={open} >\n            <Modal.Header> Invite a player </Modal.Header>\n            <Modal.Content>\n                <Segment inverted>\n                    <Loader inline indeterminate>Waiting for your opponent to join</Loader>\n                </Segment>\n            </Modal.Content>\n            <Modal.Actions>\n\n                <Button size='tiny' negative as={Link} to='/'>\n                    <Icon name='cancel' />\n                    Cancel\n                </Button>\n                <ShareButton />\n            </Modal.Actions>\n        </Modal>\n    )\n}\n","import { useState } from 'react'\nimport { Button, Confirm, Icon } from 'semantic-ui-react'\n\nexport default function ConfirmSurrender({ surrender }) {\n    const [open, setOpen] = useState(false);\n\n    return (\n      <>\n          <Button size='mini' onClick={() => setOpen(true)}>\n            <Icon name=\"flag outline\"/>\n            Surrender\n        </Button>\n        <Confirm\n          open={open}\n            onCancel={() => setOpen(false)}\n            onConfirm={() => {\n                setOpen(false);\n                surrender();\n            }} />\n      </>\n    )\n}\n","import { Container, Label } from 'semantic-ui-react'\nimport ConfirmSurrender from './ConfirmSurrender'\nimport {getColor, getResult} from '../utils/utils'\nimport ShareButton from './ShareButton'\n\n\nexport default function InformationMenu({team, state, surrender}) {\n    const message = state.team === team ? \"It's your turn\" : \"It's your opponents turn\"\n    const result = getResult(state.result);\n    console.log(state);\n    return  (\n        <Container>\n            <Label color={getColor(team)}>\n                Your team\n            </Label>\n            <Label color={getColor(state.team)}>\n                {message}\n            </Label>\n            <Label basic>\n                State: {result}\n            </Label>\n            <ShareButton />\n            <ConfirmSurrender surrender={surrender}/>\n        </Container>\n    )\n}\n","import GenericGame from \"./GenericGame\";\nimport useForceUpdate from \"../utils/useForceUpdate\";\nimport useHiveGame from \"./useHiveGame\";\nimport { useEffect } from \"react\";\nimport InformationMenu from '../components/InformationMenu'\n\nexport default function SocketGame( {socket, gid, p1, p2, team} ) {\n    const forceUpdate = useForceUpdate();\n    const {apply, state} = useHiveGame();\n    const submitAction = (action) => socket.emit(\"intendAction\", {action: action})\n    const surrender = () => socket.emit(\"surrender\");\n\n    useEffect( () => {\n        socket.emit('joinGame', {gid: gid, team: team})\n        const actionListener = (action) => {\n            apply(action);\n            forceUpdate();\n        }\n        socket.on('updateAction', actionListener);\n        socket.on('surrender', ({team}) => {\n            state.surrender(team);\n            forceUpdate();\n        });\n        return () => {\n            socket.off('updateAction', actionListener)\n        }\n    }, [socket])\n    return <>\n            <InformationMenu team={team} state={state} surrender={surrender}/>\n            <Wrapped state={state} p1={p1} p2={p2} submitAction={submitAction} />\n            </>\n}    \n\nfunction Wrapped({state, p1, p2, submitAction}) {\n    const player = ((state.turnNumber % 2 === 0) ? p1 : p2)(submitAction, state)\n    return (\n        <GenericGame controller={player} state={state} />\n    )\n}\n","import { useState } from \"react\";\n\nexport default function useForceUpdate(){\n    const [, setValue] = useState(0); // integer state\n    return () => setValue(value => value + 1); // update the state to force render\n}\n","import { useInteractiveController } from '../controllers/interactiveController'\nimport remoteDummy from '../controllers/remoteDummyController'\nimport GameChat from '../components/GameChat'\nimport ShareGameModal from '../components/ShareGameModal'\nimport { useState, useEffect } from 'react'\nimport socketIOClient from \"socket.io-client\"\n\nimport SocketGame from './SocketGame'\n\n\nexport default function OnlineGame({ gid, team }) {\n    const [socket, setSocket] = useState(null);\n    const [shareGameModalOpen, setShareGameModalOpen] = useState(true);\n    useEffect( () => {\n        const newSocket = socketIOClient()\n        setSocket(newSocket);\n        // newSocket.onAny((...args) => {\n            // console.log(args)\n        // })\n        newSocket.on('startGame', () => {\n            setShareGameModalOpen(false);\n        });\n        return () => {\n            newSocket.close()\n        }\n    }, [setSocket])\n\n    let p1, p2;\n    if (team === 'white') {\n        p1 = useInteractiveController;\n        p2 = remoteDummy;\n    } else {\n        p1 = remoteDummy;\n        p2 = useInteractiveController;\n    }\n\n    return (\n        <div>\n            {socket ?\n             <div>\n                <SocketGame socket={socket} gid={gid} p1={p1} p2={p2} team={team} />\n                <GameChat socket={socket} />\n             </div>\n            : 'Not Connected' }\n\n            <ShareGameModal open={shareGameModalOpen} setOpen={setShareGameModalOpen} />\n        </div>\n    )\n}\n","import { useInteractiveController } from '../controllers/interactiveController';\nimport LocalGame from './LocalGame';\n\nexport default function InteractiveRandom() {\n    const p1 = useInteractiveController;\n    const p2 = useInteractiveController;\n    return <LocalGame p1={p1} p2={p2} />\n}\n","export default function randomController(submitAction, state) {\n    const action = state.actions[Math.floor(Math.random() * state.actions.length)];\n    submitAction(action);\n}","import { useInteractiveController } from '../controllers/interactiveController';\nimport randomController from '../controllers/randomController';\nimport LocalGame from './LocalGame';\n\nexport default function LocalRandomGame({ team }) {\n    let p1, p2;\n    if (team === 'white') {\n        p1 = useInteractiveController;\n        p2 = randomController;\n    } else {\n        p1 = randomController;\n        p2 = useInteractiveController;\n    }\n    return <LocalGame p1={p1} p2={p2} />\n}","import { useParams } from 'react-router-dom'\nimport useQuery from '../utils/useQuery';\nimport OnlineGame from './OnlineGame';\nimport LocalSelfGame from './LocalSelfGame'\nimport LocalRandomGame from './LocalRandomGame'\n\n\nexport default function GameManager() {\n    const { gid } = useParams();\n    const query = useQuery();\n    const team = query.get('team') || 'white';\n    const mode = query.get('mode') || 'local';\n\n    if (mode === 'online') {\n        return <OnlineGame gid={gid} team={team} />\n    } else if (mode === 'local') {\n        return  <LocalSelfGame />\n    } else if (mode === 'ai' ) {\n        return <LocalRandomGame team={team} />\n    } else {\n        return (\n        <div>\n            Invalid Game\n        </div>)\n    }\n\n}\n","import { useLocation } from 'react-router-dom'\n\nexport default function useQuery() {\n  return new URLSearchParams(useLocation().search);\n}"],"sourceRoot":""}