{"version":3,"sources":["client/controllers/remoteDummyController.ts","client/components/ShareButton.tsx","client/components/ShareGameModal.tsx","client/components/ConfirmSurrender.tsx","client/components/InformationMenu.tsx","client/game/SocketGame.tsx","client/utils/useForceUpdate.ts","client/game/OnlineGame.tsx","client/controllers/randomController.ts","client/game/LocalRandomGame.tsx","client/game/GameManager.tsx","client/utils/useQuery.ts"],"names":["remoteDummy","submitAction","state","highlighted","handleBoardClick","console","log","handleDropClick","ShareButton","useState","copied","setCopied","shared","setShared","inviteLink","document","URL","shareData","title","text","url","match","replace","navigator","share","Button","size","color","onClick","then","catch","err","alert","Icon","name","clipboard","writeText","ShareGameModal","open","setOpen","Modal","dimmer","Header","Content","Segment","inverted","Loader","inline","indeterminate","Actions","negative","as","Link","to","ConfirmSurrender","surrender","Confirm","onCancel","onConfirm","InformationMenu","team","message","result","getResult","Container","Label","getColor","basic","SocketGame","socket","gid","p1","p2","forceUpdate","setValue","value","useForceUpdate","useHiveGame","apply","useEffect","emit","actionListener","json","action","deserializeAction","on","off","Wrapped","player","turnNumber","GenericGame","controller","OnlineGame","setSocket","shareGameModalOpen","setShareGameModalOpen","newSocket","socketIOClient","close","useInteractiveController","randomController","actions","Math","floor","random","length","LocalRandomGame","LocalGame","GameManager","useParams","query","URLSearchParams","useLocation","search","get","mode","LocalSelfGame"],"mappings":"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","file":"static/js/4.641ebc76.chunk.js","sourcesContent":["export default function remoteDummy (submitAction, state) {\n        return ({\n            highlighted: [],\n            handleBoardClick: () => console.log(\"Remote player's turn\"),\n            handleDropClick: () => console.log(\"Remote player's turn\")\n        });\n}","import { Button, Icon } from 'semantic-ui-react'\nimport { useState } from 'react'\n\nexport default function ShareButton() {\n    const [copied, setCopied] = useState(false);\n    const [shared, setShared] = useState(false);\n    let inviteLink = document.URL;\n    if (inviteLink.match(\"team=white\")) {\n        inviteLink = inviteLink.replace(\"team=white\", \"team=black\")\n    } else {\n        inviteLink = inviteLink.replace(\"team=black\", \"team=white\")\n    }\n\n    const copyToClipboard = () => {\n        navigator.clipboard.writeText(inviteLink)\n                 .then(() => setCopied(true))\n                 .catch(err => alert(\"Error in copying text: \" + err));\n    };\n\n    // https://dev.to/grafton-studio/native-tap-to-share-in-javascript-with-the-web-share-api-current-status-tips-and-limitations-4g4h\n    const shareData = {\n          title: \"HiveMind\",\n          text: \"You are challenged for a game of Hive!\",\n          url: inviteLink\n        };\n    const nativeShare = () => {\n        navigator.share(shareData)\n                 .then(() => setShared(true))\n        .catch(err => alert(\"Error sharing: \" + err));\n    };\n\n    if (navigator.share) {\n       return (\n            <Button size='tiny' color={shared ? 'grey' : 'black'} onClick={nativeShare}>\n                    <Icon name='share alternate' />\n                    {shared ? 'Shared' : 'Share the link'}\n                </Button>\n       )\n    } else {\n        return (\n        <Button size='tiny' color={copied ? 'grey' : 'black'} onClick={copyToClipboard}>\n                    <Icon name='copy' />\n                    {copied ? 'Copied to clipboard' : 'Click to copy link'}\n        </Button>\n        )\n    }\n}\n","import { Modal, Segment, Loader, Button, Icon } from 'semantic-ui-react'\nimport { Link } from 'react-router-dom'\nimport ShareButton from './ShareButton'\n\n\nexport default function ShareGameModal({ open, setOpen }) {\n    return (\n        <Modal\n            dimmer='blurring'\n            open={open} >\n            <Modal.Header> Invite a player </Modal.Header>\n            <Modal.Content>\n                <Segment inverted>\n                    <Loader inline indeterminate>Waiting for your opponent to join</Loader>\n                </Segment>\n            </Modal.Content>\n            <Modal.Actions>\n\n                <Button size='tiny' negative as={Link} to='/'>\n                    <Icon name='cancel' />\n                    Cancel\n                </Button>\n                <ShareButton />\n            </Modal.Actions>\n        </Modal>\n    )\n}\n","import { useState } from 'react'\nimport { Button, Confirm, Icon } from 'semantic-ui-react'\n\nexport default function ConfirmSurrender({ surrender }) {\n    const [open, setOpen] = useState(false);\n\n    return (\n      <>\n          <Button size='mini' onClick={() => setOpen(true)}>\n            <Icon name=\"flag outline\"/>\n            Surrender\n        </Button>\n        <Confirm\n          open={open}\n            onCancel={() => setOpen(false)}\n            onConfirm={() => {\n                setOpen(false);\n                surrender();\n            }} />\n      </>\n    )\n}\n","import { Container, Label } from 'semantic-ui-react'\nimport ConfirmSurrender from './ConfirmSurrender'\nimport {getColor, getResult} from '../utils/utils'\nimport ShareButton from './ShareButton'\n\n\nexport default function InformationMenu({team, state, surrender}) {\n    const message = state.team === team ? \"It's your turn\" : \"It's your opponents turn\"\n    const result = getResult(state.result);\n    return  (\n        <Container>\n            <Label color={getColor(team)}>\n                Your team\n            </Label>\n            <Label color={getColor(state.team)}>\n                {message}\n            </Label>\n            <Label basic>\n                State: {result}\n            </Label>\n            <ShareButton />\n            <ConfirmSurrender surrender={surrender}/>\n        </Container>\n    )\n}\n","import GenericGame from \"./GenericGame\";\nimport useForceUpdate from \"../utils/useForceUpdate\";\nimport useHiveGame from \"./useHiveGame\";\nimport { useEffect } from \"react\";\nimport InformationMenu from '../components/InformationMenu'\nimport { deserializeAction } from \"../../shared/model/action\";\n\nexport default function SocketGame( {socket, gid, p1, p2, team} ) {\n    const forceUpdate = useForceUpdate();\n    const {apply, state} = useHiveGame();\n    const submitAction = (action) => socket.emit(\"intendAction\", {action: action})\n    const surrender = () => socket.emit(\"surrender\");\n\n    useEffect( () => {\n        socket.emit('joinGame', {gid: gid, team: team})\n        const actionListener = (json) => {\n            const action = deserializeAction(json);\n            apply(action);\n            forceUpdate();\n        }\n        socket.on('updateAction', actionListener);\n        socket.on('surrender', ({team}) => {\n            state.surrender(team);\n            forceUpdate();\n        });\n        return () => {\n            socket.off('updateAction', actionListener)\n        }\n    }, [socket])\n    return <>\n            <InformationMenu team={team} state={state} surrender={surrender}/>\n            <Wrapped state={state} p1={p1} p2={p2} submitAction={submitAction} />\n            </>\n}    \n\nfunction Wrapped({state, p1, p2, submitAction}) {\n    const player = ((state.turnNumber % 2 === 0) ? p1 : p2)(submitAction, state)\n    return (\n        <GenericGame controller={player} state={state} />\n    )\n}\n","import { useState } from \"react\";\n\nexport default function useForceUpdate(){\n    const [, setValue] = useState(0); // integer state\n    return () => setValue(value => value + 1); // update the state to force render\n}\n","import { useInteractiveController } from '../controllers/interactiveController'\nimport remoteDummy from '../controllers/remoteDummyController'\nimport GameChat from '../components/GameChat'\nimport ShareGameModal from '../components/ShareGameModal'\nimport { useState, useEffect } from 'react'\nimport socketIOClient from \"socket.io-client\"\n\nimport SocketGame from './SocketGame'\n\n\nexport default function OnlineGame({ gid, team }) {\n    const [socket, setSocket] = useState(null);\n    const [shareGameModalOpen, setShareGameModalOpen] = useState(true);\n    useEffect( () => {\n        const newSocket = socketIOClient()\n        setSocket(newSocket);\n        // newSocket.onAny((...args) => {\n            // console.log(args)\n        // })\n        newSocket.on('startGame', () => {\n            setShareGameModalOpen(false);\n        });\n        return () => {\n            newSocket.close()\n        }\n    }, [setSocket])\n\n    let p1, p2;\n    if (team === 'white') {\n        p1 = useInteractiveController;\n        p2 = remoteDummy;\n    } else {\n        p1 = remoteDummy;\n        p2 = useInteractiveController;\n    }\n\n    return (\n        <div>\n            {socket ?\n             <div>\n                <SocketGame socket={socket} gid={gid} p1={p1} p2={p2} team={team} />\n                    {/* <GameChat socket={socket} /> */}\n             </div>\n            : 'Not Connected' }\n\n            <ShareGameModal open={shareGameModalOpen} setOpen={setShareGameModalOpen} />\n        </div>\n    )\n}\n","export default function randomController(submitAction, state) {\n    const action = state.actions[Math.floor(Math.random() * state.actions.length)];\n    submitAction(action);\n}","import { useInteractiveController } from '../controllers/interactiveController';\nimport randomController from '../controllers/randomController';\nimport LocalGame from './LocalGame';\n\nexport default function LocalRandomGame({ team }) {\n    let p1, p2;\n    if (team === 'white') {\n        p1 = useInteractiveController;\n        p2 = randomController;\n    } else {\n        p1 = randomController;\n        p2 = useInteractiveController;\n    }\n    return <LocalGame p1={p1} p2={p2} />\n}","import { useParams } from 'react-router-dom'\nimport useQuery from '../utils/useQuery';\nimport OnlineGame from './OnlineGame';\nimport LocalSelfGame from './LocalSelfGame'\nimport LocalRandomGame from './LocalRandomGame'\n\n\nexport default function GameManager() {\n    const { gid } = useParams();\n    const query = useQuery();\n    const team = query.get('team') || 'white';\n    const mode = query.get('mode') || 'local';\n\n    if (mode === 'online') {\n        return <OnlineGame gid={gid} team={team} />\n    } else if (mode === 'local') {\n        return  <LocalSelfGame />\n    } else if (mode === 'ai' ) {\n        return <LocalRandomGame team={team} />\n    } else {\n        return (\n        <div>\n            Invalid Game\n        </div>)\n    }\n\n}\n","import { useLocation } from 'react-router-dom'\n\nexport default function useQuery() {\n  return new URLSearchParams(useLocation().search);\n}"],"sourceRoot":""}